#!/usr/bin/env node

'use strict'

require('dotenv').config()
const appRootPath = require('app-root-path').toString()
const _ = require('lodash')
const debug = require('debug')('students')

const npmPath = require('npm-path')
const chai = require('chai')
const expect = chai.expect
chai.use(require('dirty-chai'))
const childProcess = require('child_process')
const emailValidator = require('email-validator')
const base64JS = require('base64-js')
const imageType = require('image-type')
const imageSize = require('image-size')
const stringHash = require('string-hash')

/*
 * Example object from my.cs.illinois.edu:
 *
 * "Action": "",
 * "Admit Term": "Fall 2017",
 * "College": "Liberal Arts & Sciences",
 * "Degree": "BSLAS",
 * "FERPA": "N",
 * "Gender": "M",
 * "Level": "1U",
 * "Major 1 Name": "Computer Sci & Chemistry",
 * "Name": "Last, First",
 * "Net ID": "lastfirst",
 * "UIN": "123456789",
 * "Year": "Sophomore",
 * "classes": [
 *  {
 *    "class": "CS 125 AL3",
 *    "CRN": "50158",
 *    "credits": "4"
 *  },
 *  {
 *    "class": "CS 125 AYT",
 *    "CRN": "69488"
 *  }
 * ],
 */

const blankPhoto = '1758209682'
function people (config) {
  npmPath.setSync()

  let command = `casperjs lib/students-my.cs.illinois.edu --course=${config.course}`
  var options = {
    maxBuffer: 1024 * 1024 * 1024,
    cwd: appRootPath
  }
  if (config.sections) {
    command += ` --sections=${config.sections}`
  }
  if (config.debug) {
    command += ` --verbose`
    options.stdio = [0, 1, 2]
  }
  debug(`Running ${command}`)
  let currentPeople = JSON.parse(childProcess.execSync(command, options).toString())

  // Can't recover the JSON in this case, so just return
  if (config.debug) {
    return
  }
  debug(`Saw ${_.keys(currentPeople).length} people`)

  const matchClassID = new RegExp('\\s+(\\w+)$')
  let normalizedPeople = _.mapValues(currentPeople, person => {
    let email = person['Net ID'] + `@illinois.edu`
    expect(emailValidator.validate(email)).to.be.true()

    let name = person['Name'].split(',')
    expect(name).to.have.lengthOf.above(1)
    let firstName = name[1].trim()
    let lastName = [name[0].trim(), name.slice(2).join('').trim()].join(' ')

    let normalizedPerson = {
      email: email,
      admitted: person['Admit Term'],
      college: person['College'],
      degree: person['Degree'],
      gender: person['Gender'],
      level: person['Level'],
      major: person['Major 1 Name'],
      hidden: (person['FERPA'] === 'Y'),
      name: {
        full: firstName + ' ' + lastName.trim(),
        first: firstName.trim(),
        last: lastName.trim()
      },
      username: person['Net ID'],
      ID: person['UIN'],
      year: person['Year'],
      classes: (() => {
        _.each(person.classes, (c) => {
          c.ID = c['CRN']
          c.name = matchClassID.exec(c['class'].trim())[0].trim()
          delete (c['CRN'])
          delete (c['class'])
          c['credits'] = parseInt(c['credits'])
        })
        return person.classes
      })()
    }
    if (stringHash(person.image) !== blankPhoto) {
      let photoData = base64JS.toByteArray(person.image)
      let photoType = imageType(photoData)
      expect(photoType).to.not.be.null()
      var photoSize = imageSize(Buffer.from(photoData))
      expect(photoSize).to.not.be.null()
      normalizedPerson.photo = {
        contents: person.image,
        type: photoType,
        size: photoSize
      }
    }
    return normalizedPerson
  })
  normalizedPeople = _.mapKeys(normalizedPeople, person => {
    return person.email
  })
  return normalizedPeople
}

if (require.main === module) {
  let argv = require('minimist')(process.argv.slice(2))
  people(argv)
}
module.exports = (config) => {
  expect(config.debug).to.not.be.ok('debug option can only be used from the command line')
  return people(config)
}

// vim: ts=2:sw=2:et:ft=javascript
