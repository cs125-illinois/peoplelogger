#!/usr/bin/env node

'use strict'

require('dotenv').config()
const _ = require('lodash')
const debug = require('debug')('students')

const npmPath = require('npm-path')
const expect = require('chai').expect
const childProcess = require('child_process')
const path = require('path')
const emailValidator = require('email-validator')
const base64JS = require('base64-js')
const imageType = require('image-type')
const imageSize = require('image-size')
const stringHash = require('string-hash')

function infoFromCourse(course) {
  var match = /^\s*([A-Z]+) (\d+):/.exec(course.name);
  return {
    subj: match[1].trim().toLowerCase(),
    num: match[2].trim(),
    semester: course.semester,
    sections: course.sections
  }
}

function students(config) {
  npmPath.setSync()

  let command = `casperjs lib/students-my.cs.illinois.edu --course=${ config.course }`
  var options = {
    maxBuffer: 1024 * 1024 * 1024
  }
  if (config.sections) {
    command += ` --sections=${ config.sections }`
  }
  if (config.verbose) {
    command += ` --verbose`;
    options.stdio = [0, 1, 2]
  }
  debug(command)
  students = JSON.parse(childProcess.execSync(command, options))
  debug(students)
}

/*
 * Example student object from my.cs.illinois.edu:
 *
 * "Action": "",
 * "Admit Term": "Fall 2017",
 * "College": "Liberal Arts & Sciences",
 * "Degree": "BSLAS",
 * "FERPA": "N",
 * "Gender": "M",
 * "Level": "1U",
 * "Major 1 Name": "Computer Sci & Chemistry",
 * "Name": "Last, First",
 * "Net ID": "lastfirst",
 * "UIN": "123456789",
 * "Year": "Sophomore",
 * "classes": [
 * 	{
 * 		"class": "CS 125 AL3",
 * 		"CRN": "50158",
 * 		"credits": "4"
 * 	},
 * 	{
 * 		"class": "CS 125 AYT",
 * 		"CRN": "69488"
 * 	}
 * ],
 */

const blankPhoto = "1758209682";

/*
function normalize(students, course) {
  var normalizedStudents = {}, duplicatePhotos = {};

  var courseName = /^\s*([A-Z]+\s+\d+):/.exec(course.name)[1];
  var matchClassName = new RegExp(courseName.trim() + "\\s+(\\w+)");

  var staff = {};
  _.each(course.staff, function (s) {
    staff[s.email] = true;
  });

  _.each(students, function (student) {
    var email = student['Net ID'] + `@illinois.edu`;
    if (staff[email]) {
      debug("Skipping staff member " + email);
      return;
    }
    emailValidator.validate(email).should.be.true;

    var name = student['Name'].split(',');
    name.length.should.be.above(1);
    var firstName = name[1].trim();
    var lastName = [name[0].trim(), name.slice(2).join('').trim()].join(' ');

    var normalizedStudent = {
      email: email,
			admitted: student['Admit Term'],
      college: student['College'],
      degree: student['Degree'],
      gender: student['Gender'],
      level: student['Level'],
      major: student['Major 1 Name'],
      hidden: (student['FERPA'] === 'Y'),
      name: {
        full: firstName + ' ' + lastName.trim(),
        first: firstName.trim(),
        last: lastName.trim()
      },
      username: student['Net ID'],
      ID: student['UIN'],
      year: student['Year'],
      classes: (function () {
        _.each(student.classes, function (c) {
          c.ID = c['CRN'],
          c.name = matchClassName.exec(c['class'])[1].trim();
          delete(c['CRN']);
          delete(c['class']);
          if (parseInt(c['credits']) === 0) {
            delete(c['credits']);
          }
        });
        return student.classes;
      })(),
      photo: {
        contents: student.image,
        type: photoType,
        size: photoSize
      }
    }
    if (stringHash(student.image) !== blankPhoto) {
      var photoData = base64JS.toByteArray(student.image);
      var photoType = imageType(photoData);
      photoType.should.not.be.null;
      var photoSize = imageSize(Buffer.from(photoData));
      photoSize.should.not.be.null;
      normalizedStudent.photo = {
        contents: student.image,
        type: photoType,
        size: photoSize
      }
    }
    normalizedStudents[email] = normalizedStudent;
  });

  return normalizedStudents;
}
*/

if (require.main === module) {
  let argv = require('minimist')(process.argv.slice(2))
  students(argv)
}
module.exports = students

// vim: ts=2:sw=2:et:ft=javascript
