/* global $, patchRequire, XMLHttpRequest, btoa */

'use strict'

var require = patchRequire(require) // eslint-disable-line no-use-before-define

var casper = require('casper').create({
  logLevel: 'debug',
  viewportSize: {
    width: 1280, height: 800
  }
})

var fs = require('fs')
var utils = require('utils')

// require('assert') doesn't seem to work in CasperJS
function assert (condition, message) {
  if (!condition) {
    console.error(message)
  }
}

// my.cs.illinois.edu can throw 500 errors when handling certain inputs
function checkStatus (currentPage) {
  assert(currentPage.currentHTTPStatus === 200)
}

var options = {
  debug: false
}
try {
  var commandLineOptions = casper.cli.options.course.trim().split('-')
  options.subject = commandLineOptions[0]
  options.number = commandLineOptions[1]
  options.semester = commandLineOptions[2].replace('_', ' ')

  options.sections = [ casper.cli.options.section.trim() ]
  options.netIDs = casper.cli.options.netIDs

  options.debug = casper.verbose = casper.cli.options.debug
} catch (err) {
  console.error(err)
}
options.passwords = require('dotenv').parse(fs.read('.env'))

if (options.debug) {
  console.log(JSON.stringify(options, null, 2))
}

casper.start('https://my.cs.illinois.edu/index.asp', function waitForLoginForm () {
  checkStatus(this)
  this.waitForSelector('form[name="loginform"]')
})
casper.then(function fillLogin () {
  checkStatus(this)
  this.fill('#loginform', {
    netid: options.passwords.MY_USERNAME,
    password: options.passwords.MY_PASSWORD
  })
})
casper.then(function submitLogin () {
  this.click('#action')
})
casper.then(function waitForLoginFill () {
  checkStatus(this)
  this.waitForSelector('#clsadm-content')
})

casper.thenOpen(utils.format('https://my.cs.illinois.edu/classtools/viewroster.asp?subj=%s&num=%s&sec=', options.subject, options.number))
casper.then(function waitForCheckboxes () {
  checkStatus(this)
  this.waitForSelector('form[action="/classtools/viewroster.asp"]')
})

casper.each(options.sections, function rosterRetrieval (self, section) {
  casper.then(function checkBox () {
    this.page.injectJs('jquery/jquery-3.2.1.min.js')
    var clicked = this.evaluate(function (semester, section) {
      var semesterHeader = $(":contains('" + semester + "')")
        .filter(function () {
          return $(this).children().length === 0
        })
      var semesterHeaderType = $(semesterHeader).get(0).tagName
      var clicked = 0
      $(semesterHeader).nextAll().each(function (unused, element) {
        if (section === $(element).text().trim()) {
          $(element).prev('input').first().prop('checked', true)
          clicked++
        } else if ($(element).get(0).tagName === semesterHeaderType) {
          return false
        }
      })
      return clicked
    }, options.semester, section)
    assert(clicked === 1, 'no section clicked')
  })
})
casper.then(function submitCheckbox (section) {
  this.click('input[value="View Roster"]')
})
casper.then(function waitForRoster () {
  checkStatus(this)
  this.waitForSelector('footer', null, null, 180000)
})
casper.then(function fillLogin () {
  checkStatus(this)
  this.fill('form', {
    netid: 'challen'
  })
})
casper.then(function submitLogin () {
  this.click('input[value="Add"]')
})


casper.run()

// vim: et:ts=2:sw=2:ft=javascript
