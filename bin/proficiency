#!/usr/bin/env node

'use strict'

const _ = require('lodash')
const jsYAML = require('js-yaml')
const tmp = require('tmp')
const npmPath = require('npm-path')
const childProcess = require('child_process')
const fs = require('fs')
const emailAddresses = require('email-addresses')

const chai = require('chai')
const expect = chai.expect
chai.use(require('dirty-chai'))
const mongo = require('mongodb').MongoClient

let argv = require('minimist')(process.argv.slice(2))
let config = _.extend(
  jsYAML.safeLoad(fs.readFileSync('config.yaml', 'utf8')),
  jsYAML.safeLoad(fs.readFileSync('secrets.yaml', 'utf8')),
  argv
)

npmPath.setSync()

mongo.connect(config.secrets.mongo, { useNewUrlParser: true }).then(async client => {
  let quizCollection = client.db('cs125').collection('quizGrades')
  let quizGrades = await quizCollection.find({
    semester: 'Fall2018',
    course: 'proficiency',
    type: 'exam'
  }).toArray()

  expect(_.uniq(quizGrades, 'email').length).to.equal(quizGrades.length)

  const netIDs = _(quizGrades).map('email').map(email => {
    return emailAddresses.parseOneAddress(email).local
  }).value()

  console.log(netIDs)

  client.close()

  /*
  quizGrades = _.keyBy(quizGrades, 'email')
  expect(_.keys(currentPeople)).to.have.lengthOf.above(1)
  console.log("First Name,Last Name,UIN,NetID,Email,Score,Passed,CS,Major,College")
  _.each(currentPeople, person => {
    let name = person['Name'].split(',')
    let email = `${ person['Net ID'] }@illinois.edu`
    if (!(email in quizGrades)) {
      return
    }
    let score = quizGrades[email].score
    let major = person['Major 1 Name']
    let CS = major.includes('Computer Science') || major.includes('Computer Sci')
    console.log(`${ name[1].trim() },${ name[0].trim() },${ person['UIN'] },${ person['Net ID'] },${ email },${ score },${ score >= 60 ? "x" : "" },${ CS ? "x" : "" },${ major },"${ person['College'] }"`)
  })
  */
})

// vim: ts=2:sw=2:et:ft=javascript
