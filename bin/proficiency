#!/usr/bin/env node

'use strict'

const _ = require('lodash')
const jsYAML = require('js-yaml')
const tmp = require('tmp')
const npmPath = require('npm-path')
const childProcess = require('child_process')
const fs = require('fs')
const emailAddresses = require('email-addresses')

const chai = require('chai')
const expect = chai.expect
chai.use(require('dirty-chai'))
const mongo = require('mongodb').MongoClient

let argv = require('minimist')(process.argv.slice(2))
let config = _.extend(
  jsYAML.safeLoad(fs.readFileSync('config.yaml', 'utf8')),
  jsYAML.safeLoad(fs.readFileSync('secrets.yaml', 'utf8')),
  argv
)

npmPath.setSync()

mongo.connect(config.secrets.mongo, { useNewUrlParser: true }).then(async client => {
  let quizCollection = client.db('cs125').collection('quizGrades')
  let quizGrades = await quizCollection.find({
    semester: 'Fall2018',
    course: 'proficiency',
    type: 'exam'
  }).toArray()

  expect(_.uniq(quizGrades, 'email').length).to.equal(quizGrades.length)

  const netIDs = _(quizGrades).map('email').map(email => {
    return emailAddresses.parseOneAddress(email).local
  }).value()

  client.close()

  let configFile = tmp.fileSync()
  let addConfig = {
    subject: 'CS',
    semester: 'Fall 2018',
    number: '199',
    section: '196',
    netIDs,
    secrets: config.secrets
  }
  fs.writeFileSync(configFile.name, JSON.stringify(addConfig))

  let addCommand = `casperjs lib/add-my.cs.illinois.edu ${configFile.name}`
  let options = { maxBuffer: 1024 * 1024 * 1024, timeout: 10 * 60 * 1000 }

  try {
    childProcess.execSync(addCommand, options)
    fs.unlinkSync(configFile.name)
  } catch (err) {
    config.log.warn(err)
  }

  let getConfig = {
    subject: 'CS',
    semester: 'Fall 2018',
    number: '199',
    sections: [ '196' ],
    secrets: config.secrets
  }
  fs.writeFileSync(configFile.name, JSON.stringify(getConfig))

  let getCommand = `casperjs lib/get-my.cs.illinois.edu ${configFile.name}`
  options = { maxBuffer: 1024 * 1024 * 1024, timeout: 10 * 60 * 1000 }

  try {
    var currentPeople = JSON.parse(childProcess.execSync(getCommand, options).toString())
    fs.unlinkSync(configFile.name)
  } catch (err) {
    // Throw to make sure that we don't run other tasks
    throw err
  }

  quizGrades = _.keyBy(quizGrades, 'email')
  expect(_.keys(currentPeople)).to.have.lengthOf.above(1)
  console.log("First Name,Last Name,UIN,NetID,Email,Score,Passed,CS,Major")
  _.each(currentPeople, person => {
    let name = person['Name'].split(',')
    let email = `${ person['Net ID'] }@illinois.edu`
    expect(quizGrades).to.have.property(email)
    let score = quizGrades[email].score
    let major = person['Major 1 Name']
    let CS = major.includes('Computer Science') || major.includes('Computer Sci')
    console.log(`${ name[1].trim() },${ name[0].trim() },${ person['UIN'] },${ person['Net ID'] },${ email },${ score },${ score >= 60 ? "x" : "" },${ CS ? "x" : "" },${ major }`)
  })

  fs.writeFileSync(configFile.name, JSON.stringify({
    subject: 'CS',
    semester: 'Fall 2018',
    number: '199',
    section: '196',
    netIDs,
    secrets: config.secrets
  }))
  const command = `casperjs lib/remove-my.cs.illinois.edu ${configFile.name}`
  options = { maxBuffer: 1024 * 1024 * 1024, timeout: 10 * 60 * 1000 }
  try {
    childProcess.execSync(command, options)
    fs.unlinkSync(configFile.name)
  } catch (err) {
    console.error(err)
  }

})

// vim: ts=2:sw=2:et:ft=javascript
