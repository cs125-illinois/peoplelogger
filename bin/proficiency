#!/usr/bin/env node

'use strict'

const _ = require('lodash')
const jsYAML = require('js-yaml')
const tmp = require('tmp')
const npmPath = require('npm-path')
const childProcess = require('child_process')
const fs = require('fs')
const emailAddresses = require('email-addresses')
const moment = require('moment-timezone')

const chai = require('chai')
const expect = chai.expect
chai.use(require('dirty-chai'))
const mongo = require('mongodb').MongoClient
const people = require('../lib/people')

let argv = require('minimist')(process.argv.slice(2))
let config = _.extend(
  jsYAML.safeLoad(fs.readFileSync('proficiency.yaml', 'utf8')),
  jsYAML.safeLoad(fs.readFileSync('config.yaml', 'utf8')),
  jsYAML.safeLoad(fs.readFileSync('secrets.yaml', 'utf8')),
  argv
)

npmPath.setSync()

const threshold = config.threshold || 0

mongo.connect(config.secrets.mongo, { useNewUrlParser: true }).then(async client => {
  let quizCollection = client.db('cs125').collection('quizGrades')
  let quizGrades = await quizCollection.find({
    course: 'proficiency',
    type: 'exam',
    latest: true,
    detailed: true,
    email: { $nin: config.ignore },
    score: { $gte: threshold }
  }).toArray()
  client.close()

  if (config.manual) {
    _.each(config.manual, (date, email) => {
      quizGrades.push({
        email,
        received: moment.tz(new Date(date), config.timezone)
      })
    })
  }

  if (argv.after) {
    const afterDate = moment.tz(new Date(argv.after), config.timezone)
    quizGrades = _.filter(quizGrades, grade => {
      return moment(grade.received).isAfter(afterDate)
    })
  }

  expect(_.uniq(quizGrades, 'email').length).to.equal(quizGrades.length)
  quizGrades = _.keyBy(quizGrades, 'email')

  const netIDs = _(quizGrades).map('email').map(email => {
    return emailAddresses.parseOneAddress(email).local
  }).value()
  const currentPeople = await people.getPeopleFromAD(config, netIDs)
  expect(_.keys(currentPeople)).to.have.lengthOf.above(1)

  console.log("First Name,Last Name,UIN,NetID,Email,Score,Passed,CS,Major,College")
  _.each(currentPeople, ({ name, email, college, major, ID }) => {
    expect(quizGrades).to.have.property(email)
    const score = quizGrades[email].score
    let CS = major ? major.includes('Computer Science') || major.includes('Computer Sci') : '?'
    console.log(`${ name.last },${ name.first },${ ID },${ email.split('@')[0] },${ email },${ score },${ score >= 60 ? "x" : "" },${ CS ? "x" : "" },${ major },"${ college }"`)
  })
})

// vim: ts=2:sw=2:et:ft=javascript
